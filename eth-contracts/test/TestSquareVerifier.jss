// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var fs = require('fs');
var proof = JSON.parse(fs.readFileSync('/../../zokrates/code/square/proof.json', 'utf8'));
var {p, i} = JSON.parse(fs.readFileSync('/../../zokrates/code/square/proof.json', 'utf8'));


contract('TestVerifier', accounts => {

    const account_one = accounts[0];


  
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
TODO:
    
// Test verification with incorrect proof
TODO:


describe('match verifier spec', function () {
    beforeEach(async function () {
        this.contract = await Verifier.new({from: account_one});
    });

    console.log(proof);
    console.log(p.A);
    console.log(i);

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    /*it('Test verification with correct proof', async function () {
        const result = await this.contract.verifyTx.call(proof, A_p, B, B_p, C, C_p, H, K, correctProofInput);
        assert.equal(isVerified, true, "Incorrect proof");
    });

    // Test verification with incorrect proof
    it('Test verification with incorrect proof', async function () {
        let isVerified = await this.contract.verifyTx.call(A, A_p, B, B_p, C, C_p, H, K, incorrectProofInput);
        assert.equal(isVerified, false, "Correct proof");
    });*/
});

}