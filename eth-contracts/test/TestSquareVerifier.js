// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var fs = require('fs');
var {proof, input} = JSON.parse(fs.readFileSync('proof.json', 'utf8'));


contract('TestVerifier', accounts => {

    const account_one = accounts[0];

    describe('match verifier spec', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account_one});
        });

        
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Test verification with correct proof', async function () {
            const result = await this.contract.verifyTx.call(proof.A, proof.A_p, proof.B, proof.B_p, proof.C, proof.C_p, proof.H, proof.K, input);
            assert.equal(result, true, "Invalid proof");
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            const result = await this.contract.verifyTx.call(proof.A_p, proof.A_p, proof.B, proof.B_p, proof.C, proof.C_p, proof.H, proof.K, input);
            assert.equal(result, false, "Proof should be invalid");
        });
        
    });

})